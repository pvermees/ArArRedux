
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ArArRedux"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "ArArRedux-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('ArArRedux')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Melbourne")
> ### * Melbourne
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Melbourne
> ### Title: An example dataset
> ### Aliases: Melbourne
> 
> ### ** Examples
> 
> data(Melbourne)
> plotcorr(Melbourne$X)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Melbourne", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("average")
> ### * average
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: average
> ### Title: Calculate the arithmetic mean
> ### Aliases: average
> 
> ### ** Examples
> 
> data(Melbourne)
> K <- average(Melbourne$X,grep("K:",Melbourne$X$labels),newlabel="K-glass")
> plotcorr(K)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("average", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("averagebyday")
> ### * averagebyday
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: averagebyday
> ### Title: Average all the data collected on the same day.
> ### Aliases: averagebyday
> 
> ### ** Examples
> 
> dfile <- system.file("Calibration.csv",package="ArArRedux")
> md <- loaddata(dfile)
> ld <- fitlogratios(blankcorr(md))
> d <- averagebyday(ld,"DCAL")
> plotcorr(d)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("averagebyday", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("blankcorr")
> ### * blankcorr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: blankcorr
> ### Title: Apply a blank correction
> ### Aliases: blankcorr blankcorr.default blankcorr.timeresolved
> ###   blankcorr.PHdata blankcorr.WiscAr
> 
> ### ** Examples
> 
> samplefile <- system.file("Samples.csv",package="ArArRedux")
> m <- loaddata(samplefile) # samples and J-standards
> blanklabel <- "EXB#"
> l <- fitlogratios(blankcorr(m,blanklabel),"Ar40")
> plotcorr(l)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("blankcorr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("calibration")
> ### * calibration
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: calibration
> ### Title: Detector calibration
> ### Aliases: calibration calibration.default calibration.WiscAr
> 
> ### ** Examples
> 
> data(Melbourne)
> C <- calibration(Melbourne$X,"DCAL")
> plotcorr(C)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("calibration", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("clcorrection")
> ### * clcorrection
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: clcorrection
> ### Title: Cl-interference correction
> ### Aliases: clcorrection
> 
> ### ** Examples
> 
> data(Melbourne)
> Cl <- clcorrection(Melbourne$X,Melbourne$irr)
> plotcorr(Cl)
Warning in stats::cov2cor(X$covmat) :
  diag(.) had 0 or NA entries; non-finite result is doubtful
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("clcorrection", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("concat")
> ### * concat
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: concat
> ### Title: Merge a list of logratio data
> ### Aliases: concat concat.default concat.WiscAr
> 
> ### ** Examples
> 
> samplefile <-  system.file("Samples.csv",package="ArArRedux")
> kfile <- system.file("K-glass.csv",package="ArArRedux")
> cafile <- system.file("Ca-salt.csv",package="ArArRedux")
> dfile <- system.file("Calibration.csv",package="ArArRedux")
> blanklabel <- "EXB#"
> Jpos <- c(3,15)
>  
> m <- loaddata(samplefile) # samples and J-standards
> mk <- loaddata(kfile) # K-interference data
> mca <- loaddata(cafile) # Ca interference data
> md <- loaddata(dfile) # detector intercalibrations
>  
> # form and fit logratios
> l <- fitlogratios(blankcorr(m,blanklabel),"Ar40")
> lk <- fitlogratios(blankcorr(mk,blanklabel,"K:"),"Ar40")
> k <- getmasses(lk,"Ar39","Ar40") # subset on the relevant isotopes
> lca <- fitlogratios(blankcorr(mca,blanklabel,"Ca:"),"Ar37")
> ca <- getmasses(lca,c("Ar36","Ar39"),c("Ar37","Ar37")) # subset
> ld <- fitlogratios(blankcorr(md))
> d <- averagebyday(ld,"DCAL")
> 
> # merge all data (except air shots) into one big logratio structure
> X <- newredux(concat(list(l,k,ca,d)),Jpos)
> data(Melbourne)
> if (isTRUE(all.equal(Melbourne$X,X))) {
+    print("We just reconstructed the built-in dataset Melbourne$X")}
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("concat", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("decaycorrection")
> ### * decaycorrection
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: decaycorrection
> ### Title: Correct for radioactive decay occurred since irradiation
> ### Aliases: decaycorrection
> 
> ### ** Examples
> 
> data(Melbourne)
> C <- calibration(Melbourne$X,"DCAL")
> A <- massfractionation(C,Melbourne$fract)
> D9 <- decaycorrection(A,Melbourne$irr,"Ar39")
> plotcorr(D9)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("decaycorrection", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fitlogratios")
> ### * fitlogratios
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fitlogratios
> ### Title: Extrapolation to 'time zero'
> ### Aliases: fitlogratios fitlogratios.default fitlogratios.timeresolved
> ###   fitlogratios.PHdata fitlogratios.WiscAr
> 
> ### ** Examples
> 
> samplefile <- system.file("Samples.csv",package="ArArRedux")
> m <- loaddata(samplefile) # samples and J-standards
> blanklabel <- "EXB#"
> l <- fitlogratios(blankcorr(m,blanklabel),"Ar40")
> plotcorr(l)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fitlogratios", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fractionation")
> ### * fractionation
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fractionation
> ### Title: Compute the mass fractionation correction
> ### Aliases: fractionation
> 
> ### ** Examples
> 
> data(Melbourne)
> fd37file <- system.file("AirL2.csv",package="ArArRedux")
> fd40file <- system.file("AirH1.csv",package="ArArRedux")
> fract <- list(fractionation(fd37file,"L2"),
+               fractionation(fd40file,"H1"))
> if (isTRUE(all.equal(Melbourne$fract,fract))){
+   print("We just re-created the fractionation correction for the Melbourne dataset")
+ }
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fractionation", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get4039")
> ### * get4039
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get4039
> ### Title: Calculate the 40Ar*/39ArK-ratios
> ### Aliases: get4039
> 
> ### ** Examples
> 
> data(Melbourne)
> R <- get4039(Melbourne$X,Melbourne$irr)
> plotcorr(R)
Warning in stats::cov2cor(X$covmat) :
  diag(.) had 0 or NA entries; non-finite result is doubtful
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get4039", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getJfactors")
> ### * getJfactors
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getJfactors
> ### Title: Calculate the irradiation parameter ('J factor')
> ### Aliases: getJfactors
> 
> ### ** Examples
> 
> data(Melbourne)
> R <- get4039(Melbourne$X,Melbourne$irr)
> J <- getJfactors(R)
> plotcorr(J)
Warning in stats::cov2cor(X$covmat) :
  diag(.) had 0 or NA entries; non-finite result is doubtful
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getJfactors", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getages")
> ### * getages
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getages
> ### Title: Calculate 40Ar/39Ar ages
> ### Aliases: getages
> 
> ### ** Examples
> 
> data(Melbourne)
> R <- get4039(Melbourne$X,Melbourne$irr)
> J <- getJfactors(R)
> ages <- getages(J)
> plotcorr(ages)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getages", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getmasses")
> ### * getmasses
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getmasses
> ### Title: Select a subset of isotopes from a dataset
> ### Aliases: getmasses getmasses.default getmasses.timeresolved
> ###   getmasses.WiscAr getmasses.logratios getmasses.redux
> 
> ### ** Examples
> 
> kfile <- system.file("K-glass.csv",package="ArArRedux")
> mk <- loaddata(kfile)
> lk <- fitlogratios(blankcorr(mk,"EXB#","K:"),"Ar40")
> k <- getmasses(lk,"Ar39","Ar40") # subset of the relevant isotopes
> plotcorr(k)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getmasses", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("interference")
> ### * interference
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: interference
> ### Title: define the interference corrections
> ### Aliases: interference
> 
> ### ** Examples
> 
> samplefile <- system.file("Samples.csv",package="ArArRedux")
> irrfile <- system.file("irradiations.csv",package="ArArRedux")
> X <- read(samplefile,blabel="EXB#",Jpos=c(3,15))
> irr <- loadirradiations(irrfile)
> # assume log(36Ar/37Ar) = log(39Ar/37Ar) = 1 in co-irradiate Ca-salt
> # with variances of 0.0001 and zero covariances
> ca <- interference(intercepts=c(1,1),
+                    covmat=matrix(c(0.001,0,0,0.001),nrow=2),
+                    num=c("Ar39","Ar36"),den=c("Ar37","Ar37"),
+                    irr=X$irr[1],label="Ca-salt")
> # assume log(39Ar/40Ar) = 4.637788 in co-irradiate K-glass
> # with variance 7.9817e-4
> k <- interference(intercepts=4.637788,covmat=7.9817e-4,
+                   num="Ar39",den="Ar40",irr=X$irr[1],
+                   label="K-glass")
> ages <- process(X,irr,ca=ca,k=k)
> summary(ages)
      name      age[Ma]             s.e.[Ma]            
 [1,] "FC1_MD2" "28.2237620267159"  "0.0269147111084562"
 [2,] "FC2-MD2" "28.191956211882"   "0.0253209277110002"
 [3,] "FC3-MD2" "28.1919134833219"  "0.0255491836459355"
 [4,] "FC4-MD2" "28.1798410162245"  "0.0262140890942054"
 [5,] "MD2-1a"  "-106.313621171309" "0.304699032324512" 
 [6,] "MD2-1b"  "-104.821745840967" "0.156619312947779" 
 [7,] "MD2-1c"  "-103.495596610976" "0.106851395531071" 
 [8,] "MD2-1d"  "-103.398182097861" "0.103213812590012" 
 [9,] "MD2-1e"  "-103.450163627366" "0.0984339803366754"
[10,] "MD2-1f"  "-103.365811315276" "0.100717498149939" 
[11,] "MD2-1g"  "-103.371025452275" "0.101511983168889" 
[12,] "MD2-1h"  "-103.377124200936" "0.104417150471288" 
[13,] "MD2-1i"  "-103.407496436603" "0.101932064631989" 
[14,] "MD2-1j"  "-103.437873353811" "0.101593471625644" 
[15,] "MD2-1k"  "-103.58580448579"  "0.104019002401873" 
[16,] "MD2-1l"  "-103.517822454836" "0.104153681744221" 
[17,] "MD2-1m"  "-103.53032853284"  "0.109540965848045" 
[18,] "MD2-1n"  "-103.210744216681" "0.102224016966059" 
[19,] "MD2-1o"  "-102.845946020436" "0.100086102272904" 
[20,] "MD2-1p"  "-102.629911267364" "0.102001741016456" 
[21,] "MD2-1r"  "-103.095650790068" "0.12058943508709"  
[22,] "MD2-1s"  "-103.128341026871" "0.122415391644306" 
[23,] "MD2-1t"  "-103.31248276504"  "0.109961702485619" 
[24,] "MD2-2a"  "-114.673714231728" "3.32906270301078"  
[25,] "MD2-2b"  "-98.9657583268991" "0.49803007384955"  
[26,] "MD2-2c"  "-99.2805099097257" "0.375246961264443" 
[27,] "MD2-2d"  "-105.178888016768" "0.302629496926321" 
[28,] "MD2-2e"  "-104.909974798099" "0.216711252624881" 
[29,] "MD2-2f"  "-103.939116408363" "0.131878323140778" 
[30,] "MD2-2g"  "-103.904428562146" "0.100407930071629" 
[31,] "MD2-2h"  "-103.415690707001" "0.101471379384078" 
[32,] "MD2-2i"  "-103.408439397137" "0.105483934710344" 
[33,] "MD2-2j"  "-103.43981155667"  "0.0993173184485819"
[34,] "MD2-2k"  "-103.509423151807" "0.101128051281518" 
[35,] "MD2-2l"  "-103.525256005361" "0.098244767307413" 
[36,] "MD2-2m"  "-103.509876971839" "0.0990727169165144"
[37,] "MD2-2n"  "-103.586688040729" "0.100300988849249" 
[38,] "MD2-2o"  "-103.59317476954"  "0.098941207807135" 
[39,] "MD2-2p"  "-103.62974794583"  "0.098316558993001" 
[40,] "MD2-2q"  "-103.636522057163" "0.102216678301452" 
[41,] "MD2-2r"  "-103.561302160236" "0.102991758968662" 
[42,] "MD2-2s"  "-103.613249167095" "0.0994623544720716"
[43,] "MD2-2t"  "-103.599924939233" "0.1003845186298"   
[44,] "MD2-2u"  "-103.455151497088" "0.0996687412214976"
[45,] "MD2-2v"  "-103.274036363198" "0.0990309237095393"
[46,] "MD2-2w"  "-103.329468559738" "0.10087842428036"  
[47,] "MD2-2x"  "-103.110472772969" "0.0990493288329629"
[48,] "MD2-2y"  "-102.929044785855" "0.10030780540474"  
[49,] "MD2-2z"  "-102.876396740334" "0.10259245324359"  
[50,] "MD2-2xz" "-102.536264969098" "0.0988411150333919"
[51,] "MD2-2yz" "-102.587126382132" "0.105820154149039" 
[52,] "MD2-1"   "-107.03197144995"  "0.142105399647443" 
[53,] "MD2-2"   "-108.026158714504" "0.13733447181796"  
[54,] "MD2-3"   "-105.396376363752" "0.16972406977756"  
[55,] "MD2-4"   "-105.219384757058" "0.14347666196847"  
[56,] "MD2-5"   "-100.905148249171" "0.297712743660618" 
[57,] "MD2-6"   "-104.525169579362" "0.123223997126842" 
[58,] "MD2-7"   "-107.490616723819" "0.178641514797158" 
[59,] "MD2-8"   "-107.127382630305" "0.128210834194392" 
[60,] "MD2-9"   "-105.004018955542" "0.12477825524078"  
[61,] "MD2-10"  "-104.246874883851" "0.110406123575707" 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("interference", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("isoratios")
> ### * isoratios
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: isoratios
> ### Title: Isochron ratios
> ### Aliases: isoratios
> 
> ### ** Examples
> 
> data(Melbourne)
> IR <- isoratios(Melbourne$X,irr=Melbourne$irr,fract=Melbourne$fract)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("isoratios", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("loaddata")
> ### * loaddata
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: loaddata
> ### Title: Load mass spectrometer data
> ### Aliases: loaddata
> 
> ### ** Examples
> 
> samplefile <- system.file("Samples.csv",package="ArArRedux")
> masses <- c("Ar37","Ar38","Ar39","Ar40","Ar36")
> m <- loaddata(samplefile,MS='ARGUS-VI') # samples and J-standards
> plot(m,"MD2-1a","Ar40")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("loaddata", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("loadirradiations")
> ### * loadirradiations
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: loadirradiations
> ### Title: Load the irradiation schedule
> ### Aliases: loadirradiations
> 
> ### ** Examples
> 
> irrfile <- system.file("irradiations.csv",package="ArArRedux")
> irr <- loadirradiations(irrfile)
> str(irr)
List of 1
 $ UM52:List of 3
  ..$ P   : num [1:10] 1 1 1 1 1 1 1 1 1 1
  ..$ tin : num [1:10] 1.23e+09 1.23e+09 1.23e+09 1.23e+09 1.23e+09 ...
  ..$ tout: num [1:10] 1.23e+09 1.23e+09 1.23e+09 1.23e+09 1.23e+09 ...
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("loadirradiations", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("massfractionation")
> ### * massfractionation
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: massfractionation
> ### Title: Apply the mass fractionation correction
> ### Aliases: massfractionation
> 
> ### ** Examples
> 
> graphics.off()
> data(Melbourne)
> C <- calibration(Melbourne$X,"DCAL")
> A <- massfractionation(C,Melbourne$fract)
>  plotcorr(A)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("massfractionation", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("param")
> ### * param
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: param
> ### Title: Set or get Ar-Ar_Redux parameters
> ### Aliases: param
> 
> ### ** Examples
> 
> data(Melbourne)
> param(Melbourne$X)$air
[1] 298.56
> Y <- param(Melbourne$X,air=295.5)
> param(Y)$air
[1] 295.5
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("param", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot")
> ### * plot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.timeresolved
> ### Title: Plot a time resolved mass spectrometry signal
> ### Aliases: plot.timeresolved plot.WiscAr plot.PHdata
> 
> ### ** Examples
> 
> samplefile <- system.file("Samples.csv",package="ArArRedux")
> mMC <- loaddata(samplefile)
> plot(mMC,"MD2-1a")
> mPH <- loaddata(samplefile)
> plot(mPH,"MD2-1a","Ar40")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plotcorr")
> ### * plotcorr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plotcorr
> ### Title: Plot a matrix with correlation coefficients
> ### Aliases: plotcorr
> 
> ### ** Examples
> 
> graphics.off()
> data(Melbourne)
> plotcorr(Melbourne$X)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plotcorr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("process")
> ### * process
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: process
> ### Title: Process logratio data and calculate 40Ar/39Ar ages
> ### Aliases: process
> 
> ### ** Examples
> 
> data(Melbourne)
> ages <- process(Melbourne$X,Melbourne$irr,Melbourne$fract)
> summary(ages)
      name      age[Ma]            s.e.[Ma]            
 [1,] "FC1_MD2" "28.164819402772"  "0.023909127218122" 
 [2,] "FC2-MD2" "28.3151263374565" "0.024074716371168" 
 [3,] "FC3-MD2" "28.4387274376738" "0.0240883411914738"
 [4,] "FC4-MD2" "28.252793016844"  "0.023951338705304" 
 [5,] "MD2-1a"  "170.85618658117"  "0.143047935101519" 
 [6,] "MD2-1b"  "125.554529930172" "0.106060453543154" 
 [7,] "MD2-1c"  "107.389196563314" "0.0907509458830268"
 [8,] "MD2-1d"  "103.154274801863" "0.0874194480460585"
 [9,] "MD2-1e"  "101.092578451083" "0.0843206681329713"
[10,] "MD2-1f"  "100.905687066408" "0.0844382660569226"
[11,] "MD2-1g"  "100.636309937318" "0.0851839438928579"
[12,] "MD2-1h"  "100.0242800944"   "0.0843049587269394"
[13,] "MD2-1i"  "100.128631704415" "0.0835777837857136"
[14,] "MD2-1j"  "99.9495149576229" "0.0832670323193587"
[15,] "MD2-1k"  "100.244047503665" "0.0848100667687328"
[16,] "MD2-1l"  "100.116135313354" "0.0850453648531158"
[17,] "MD2-1m"  "100.535016392133" "0.0858240351437933"
[18,] "MD2-1n"  "100.245437243455" "0.0835785452683701"
[19,] "MD2-1o"  "100.189164184888" "0.083356952654153" 
[20,] "MD2-1p"  "99.777680998117"  "0.0834566180901827"
[21,] "MD2-1r"  "99.9568096156866" "0.0855476219501446"
[22,] "MD2-1s"  "100.333664073534" "0.0849241972479741"
[23,] "MD2-1t"  "100.576135753924" "0.0863849855097796"
[24,] "MD2-2a"  "714.603306790829" "0.950428633350121" 
[25,] "MD2-2b"  "246.692393706496" "0.242233027382809" 
[26,] "MD2-2c"  "179.005763880239" "0.16246751706699"  
[27,] "MD2-2d"  "147.624074725053" "0.123284211809422" 
[28,] "MD2-2e"  "123.809153286909" "0.102927888145468" 
[29,] "MD2-2f"  "113.384796352044" "0.0946055423068399"
[30,] "MD2-2g"  "104.106204673761" "0.0868861633185653"
[31,] "MD2-2h"  "101.468306684095" "0.0857079473268732"
[32,] "MD2-2i"  "101.121841913034" "0.0844015664425413"
[33,] "MD2-2j"  "100.65720884384"  "0.0837397312773084"
[34,] "MD2-2k"  "100.610856840147" "0.0841930860739067"
[35,] "MD2-2l"  "100.368911494985" "0.0836138727934049"
[36,] "MD2-2m"  "100.247620190466" "0.083767107172066" 
[37,] "MD2-2n"  "100.175523796921" "0.0836661303575047"
[38,] "MD2-2o"  "100.130694518736" "0.083237660002359" 
[39,] "MD2-2p"  "100.090268967761" "0.0833712862262416"
[40,] "MD2-2q"  "100.111219982593" "0.0836074522193405"
[41,] "MD2-2r"  "100.12399149701"  "0.0836699554392043"
[42,] "MD2-2s"  "100.081512459329" "0.0834743514922303"
[43,] "MD2-2t"  "100.101523031818" "0.0832568345646935"
[44,] "MD2-2u"  "100.104346779408" "0.0834647985187122"
[45,] "MD2-2v"  "99.9959629438897" "0.0831364895402818"
[46,] "MD2-2w"  "99.9412060858052" "0.0834010300227568"
[47,] "MD2-2x"  "99.7819607011634" "0.0831261204372136"
[48,] "MD2-2y"  "99.7404488229547" "0.0831127126930109"
[49,] "MD2-2z"  "99.7699913770746" "0.0839527707562064"
[50,] "MD2-2xz" "99.7880468707733" "0.0832226163849034"
[51,] "MD2-2yz" "101.642861856419" "0.0850484845692314"
[52,] "MD2-1"   "124.058355744917" "0.104082963245712" 
[53,] "MD2-2"   "127.206221989699" "0.107681093325401" 
[54,] "MD2-3"   "112.787517008082" "0.0943005573343736"
[55,] "MD2-4"   "111.798367627603" "0.0929133710008603"
[56,] "MD2-5"   "131.645924934569" "0.110526359294351" 
[57,] "MD2-6"   "108.706400610059" "0.0902601331865455"
[58,] "MD2-7"   "125.470073605143" "0.103848979306623" 
[59,] "MD2-8"   "125.235225933403" "0.103644939791433" 
[60,] "MD2-9"   "109.113669014568" "0.0908718906306774"
[61,] "MD2-10"  "103.35101888003"  "0.0861621676700317"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("process", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read")
> ### * read
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read
> ### Title: Read mass spectrometer data
> ### Aliases: read
> 
> ### ** Examples
> 
> samplefile <- system.file("Samples.csv",package="ArArRedux")
> kfile <- system.file("K-glass.csv",package="ArArRedux")
> cafile <- system.file("Ca-salt.csv",package="ArArRedux")
> dfile <- system.file("Calibration.csv",package="ArArRedux")
> X <- read(samplefile,blabel="EXB#",Jpos=c(3,15),
+           kdat=kfile,cadat=cafile,ddat=dfile,MS='ARGUS-VI')
> plotcorr(X)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("subset")
> ### * subset
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: subset.timeresolved
> ### Title: Select a subset of some data
> ### Aliases: subset.timeresolved subset.logratios subset.redux
> ###   subset.results
> 
> ### ** Examples
> 
> data(Melbourne)
> ages <- process(Melbourne$X,Melbourne$irr,Melbourne$fract)
> MD <- subset(ages,labels=c("MD2-1","MD2-2","MD2-3","MD2-4","MD2-5"))
> plotcorr(MD)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("subset", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summary")
> ### * summary
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summary.results
> ### Title: Summary table
> ### Aliases: summary.results
> 
> ### ** Examples
> 
> data(Melbourne)
> ages <- process(Melbourne$X,Melbourne$irr,Melbourne$fract)
> summary(ages)[1:5,]
     name      age[Ma]            s.e.[Ma]            
[1,] "FC1_MD2" "28.164819402772"  "0.023909127218122" 
[2,] "FC2-MD2" "28.3151263374565" "0.024074716371168" 
[3,] "FC3-MD2" "28.4387274376738" "0.0240883411914738"
[4,] "FC4-MD2" "28.252793016844"  "0.023951338705304" 
[5,] "MD2-1a"  "170.85618658117"  "0.143047935101519" 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summary", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("weightedmean")
> ### * weightedmean
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: weightedmean
> ### Title: Calculate the weighted mean age
> ### Aliases: weightedmean
> 
> ### ** Examples
> 
> data(Melbourne)
> ages <- process(Melbourne$X,Melbourne$irr,Melbourne$fract)
> weightedmean(ages,"MD2-")
Warning in subs$ages - avgt :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

Warning in subs$ages - avgt :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

$avgt
          [,1]
[1,] -2.161185

$err
            [,1]
[1,] 0.009824995

$MSWD
      [,1]
[1,] 27785

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("weightedmean", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  17.782 44.571 7.561 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
