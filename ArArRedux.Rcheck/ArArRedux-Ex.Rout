
R Under development (unstable) (2016-06-10 r70760) -- "Unsuffered Consequences"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ArArRedux"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "ArArRedux-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('ArArRedux')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Melbourne")
> ### * Melbourne
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Melbourne
> ### Title: An example dataset
> ### Aliases: Melbourne
> 
> ### ** Examples
> 
> data(Melbourne)
> plotcorr(Melbourne$X)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Melbourne", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("average")
> ### * average
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: average
> ### Title: Calculate the arithmetic mean
> ### Aliases: average
> 
> ### ** Examples
> 
> data(Melbourne)
> K <- average(Melbourne$X,grep("K:",Melbourne$X$labels),newlabel="K-glass")
> plotcorr(K)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("average", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("averagebyday")
> ### * averagebyday
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: averagebyday
> ### Title: Average all the data collected on the same day.
> ### Aliases: averagebyday
> 
> ### ** Examples
> 
> dfile <- system.file("Calibration.csv",package="ArArRedux")
> dlabels <- c("H1","AX","L1","L2")
> md <- loaddata(dfile,dlabels,PH=TRUE)
> ld <- fitlogratios(blankcorr(md))
> d <- averagebyday(ld,"DCAL")
> plotcorr(d)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("averagebyday", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("blankcorr")
> ### * blankcorr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: blankcorr
> ### Title: Apply a blank correction
> ### Aliases: blankcorr blankcorr.PHdata blankcorr.default
> ###   blankcorr.timeresolved
> 
> ### ** Examples
> 
> samplefile <- system.file("Samples.csv",package="ArArRedux")
> masses <- c("Ar37","Ar38","Ar39","Ar40","Ar36")
> m <- loaddata(samplefile,masses) # samples and J-standards
> blanklabel <- "EXB#"
> l <- fitlogratios(blankcorr(m,blanklabel),"Ar40")
> plotcorr(l)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("blankcorr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("calibration")
> ### * calibration
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: calibration
> ### Title: Detector calibration
> ### Aliases: calibration
> 
> ### ** Examples
> 
> data(Melbourne)
> C <- calibration(Melbourne$X,"DCAL")
> plotcorr(C)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("calibration", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("clcorrection")
> ### * clcorrection
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: clcorrection
> ### Title: Cl-interference correction
> ### Aliases: clcorrection
> 
> ### ** Examples
> 
> data(Melbourne)
> Cl <- clcorrection(Melbourne$X,Melbourne$irr)
> plotcorr(Cl)
Warning in stats::cov2cor(X$covmat) :
  diag(.) had 0 or NA entries; non-finite result is doubtful
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("clcorrection", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("concat")
> ### * concat
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: concat
> ### Title: Merge a list of logratio data
> ### Aliases: concat
> 
> ### ** Examples
> 
> samplefile <-  system.file("Samples.csv",package="ArArRedux")
> kfile <- system.file("K-glass.csv",package="ArArRedux")
> cafile <- system.file("Ca-salt.csv",package="ArArRedux")
> dfile <- system.file("Calibration.csv",package="ArArRedux")
> masses <- c("Ar37","Ar38","Ar39","Ar40","Ar36")
> blanklabel <- "EXB#"
> Jpos <- c(3,15)
> dlabels <- c("H1","AX","L1","L2")
>  
> m <- loaddata(samplefile,masses) # samples and J-standards
> mk <- loaddata(kfile,masses) # K-interference data
> mca <- loaddata(cafile,masses) # Ca interference data
> md <- loaddata(dfile,dlabels,PH=TRUE) # detector intercalibrations
>  
> # form and fit logratios
> l <- fitlogratios(blankcorr(m,blanklabel),"Ar40")
> lk <- fitlogratios(blankcorr(mk,blanklabel,"K:"),"Ar40")
> k <- getmasses(lk,"Ar39","Ar40") # subset on the relevant isotopes
> lca <- fitlogratios(blankcorr(mca,blanklabel,"Ca:"),"Ar37")
> ca <- getmasses(lca,c("Ar36","Ar39"),c("Ar37","Ar37")) # subset
> ld <- fitlogratios(blankcorr(md))
> d <- averagebyday(ld,"DCAL")
> 
> # merge all data (except air shots) into one big logratio structure
> X <- newredux(concat(list(l,k,ca,d)),Jpos)
> data(Melbourne)
> if (isTRUE(all.equal(Melbourne$X,X))) {
+    print("We just reconstructed the built-in dataset Melbourne$X")}
[1] "We just reconstructed the built-in dataset Melbourne$X"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("concat", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("decaycorrection")
> ### * decaycorrection
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: decaycorrection
> ### Title: Correct for radioactive decay occurred since irradiation
> ### Aliases: decaycorrection
> 
> ### ** Examples
> 
> data(Melbourne)
> C <- calibration(Melbourne$X,"DCAL")
> A <- massfractionation(C,Melbourne$fract)
> D9 <- decaycorrection(A,Melbourne$irr,"Ar39")
> plotcorr(D9)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("decaycorrection", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fitlogratios")
> ### * fitlogratios
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fitlogratios
> ### Title: Extrapolation to 'time zero'
> ### Aliases: fitlogratios fitlogratios.PHdata fitlogratios.default
> ###   fitlogratios.timeresolved
> 
> ### ** Examples
> 
> samplefile <- system.file("Samples.csv",package="ArArRedux")
> masses <- c("Ar37","Ar38","Ar39","Ar40","Ar36")
> m <- loaddata(samplefile,masses) # samples and J-standards
> blanklabel <- "EXB#"
> l <- fitlogratios(blankcorr(m,blanklabel),"Ar40")
> plotcorr(l)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fitlogratios", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fractionation")
> ### * fractionation
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fractionation
> ### Title: Compute the mass fractionation correction
> ### Aliases: fractionation
> 
> ### ** Examples
> 
> data(Melbourne)
> fd37file <- system.file("AirL2.csv",package="ArArRedux")
> fd40file <- system.file("AirH1.csv",package="ArArRedux")
> fract <- list(fractionation(fd37file,"L2",PH=TRUE),
+               fractionation(fd40file,"H1",PH=FALSE))
> if (isTRUE(all.equal(Melbourne$fract,fract))){
+   print("We just re-created the fractionation correction for the Melbourne dataset")
+ }
[1] "We just re-created the fractionation correction for the Melbourne dataset"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fractionation", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get4039")
> ### * get4039
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get4039
> ### Title: Calculate the 40Ar*/39ArK-ratios
> ### Aliases: get4039
> 
> ### ** Examples
> 
> data(Melbourne)
> R <- get4039(Melbourne$X,Melbourne$irr)
> plotcorr(R)
Warning in stats::cov2cor(X$covmat) :
  diag(.) had 0 or NA entries; non-finite result is doubtful
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get4039", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getJfactors")
> ### * getJfactors
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getJfactors
> ### Title: Calculate the irradiation parameter ('J factor')
> ### Aliases: getJfactors
> 
> ### ** Examples
> 
> data(Melbourne)
> R <- get4039(Melbourne$X,Melbourne$irr)
> J <- getJfactors(R)
> plotcorr(J)
Warning in stats::cov2cor(X$covmat) :
  diag(.) had 0 or NA entries; non-finite result is doubtful
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getJfactors", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getages")
> ### * getages
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getages
> ### Title: Calculate 40Ar/39Ar ages
> ### Aliases: getages
> 
> ### ** Examples
> 
> data(Melbourne)
> R <- get4039(Melbourne$X,Melbourne$irr)
> J <- getJfactors(R)
> ages <- getages(J)
> plotcorr(ages)
Warning in stats::cov2cor(X$covmat) :
  diag(.) had 0 or NA entries; non-finite result is doubtful
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getages", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getmasses")
> ### * getmasses
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getmasses
> ### Title: Select a subset of isotopes from a dataset
> ### Aliases: getmasses getmasses.default getmasses.logratios
> ###   getmasses.redux getmasses.timeresolved
> 
> ### ** Examples
> 
> kfile <- system.file("K-glass.csv",package="ArArRedux")
> masses <- c("Ar37","Ar38","Ar39","Ar40","Ar36")
> mk <- loaddata(kfile,masses)
> lk <- fitlogratios(blankcorr(mk,"EXB#","K:"),"Ar40")
> k <- getmasses(lk,"Ar39","Ar40") # subset of the relevant isotopes
> plotcorr(k)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getmasses", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("interference")
> ### * interference
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: interference
> ### Title: define the interference corrections
> ### Aliases: interference
> 
> ### ** Examples
> 
> samplefile <- system.file("Samples.csv",package="ArArRedux")
> irrfile <- system.file("irradiations.csv",package="ArArRedux")
> masses <- c("Ar37","Ar38","Ar39","Ar40","Ar36")
> X <- read(samplefile,masses,blabel="EXB#",Jpos=c(3,15))
> irr <- loadirradiations(irrfile)
> # assume log(36Ar/37Ar) = log(39Ar/37Ar) = 1 in co-irradiate Ca-salt
> # with variances of 0.0001 and zero covariances
> ca <- interference(intercepts=c(1,1),
+                    covmat=matrix(c(0.001,0,0,0.001),nrow=2),
+                    num=c("Ar39","Ar36"),den=c("Ar37","Ar37"),
+                    irr=X$irr[1],label="Ca-salt")
> # assume log(39Ar/40Ar) = 4.637788 in co-irradiate K-glass
> # with variance 7.9817e-4
> k <- interference(intercepts=4.637788,covmat=7.9817e-4,
+                   num="Ar39",den="Ar40",irr=X$irr[1],
+                   label="K-glass")
> ages <- process(X,irr,ca=ca,k=k)
> summary(ages)
      name      age[Ma]             s.e.[Ma]            
 [1,] "FC1_MD2" "28.2237620267159"  "0.0269147111084562"
 [2,] "FC2-MD2" "28.191956211882"   "0.0253209277110002"
 [3,] "FC3-MD2" "28.1919134833219"  "0.0255491836459355"
 [4,] "FC4-MD2" "28.1798410162245"  "0.0262140890942054"
 [5,] "MD2-1a"  "-106.313621171309" "0.304699032324512" 
 [6,] "MD2-1b"  "-104.821745840967" "0.156619312947779" 
 [7,] "MD2-1c"  "-103.495596610976" "0.106851395531071" 
 [8,] "MD2-1d"  "-103.398182097861" "0.103213812590012" 
 [9,] "MD2-1e"  "-103.450163627366" "0.0984339803366754"
[10,] "MD2-1f"  "-103.365811315276" "0.100717498149939" 
[11,] "MD2-1g"  "-103.371025452275" "0.101511983168889" 
[12,] "MD2-1h"  "-103.377124200936" "0.104417150471288" 
[13,] "MD2-1i"  "-103.407496436603" "0.101932064631989" 
[14,] "MD2-1j"  "-103.437873353811" "0.101593471625644" 
[15,] "MD2-1k"  "-103.58580448579"  "0.104019002401873" 
[16,] "MD2-1l"  "-103.517822454836" "0.104153681744221" 
[17,] "MD2-1m"  "-103.53032853284"  "0.109540965848045" 
[18,] "MD2-1n"  "-103.210744216681" "0.102224016966059" 
[19,] "MD2-1o"  "-102.845946020436" "0.100086102272905" 
[20,] "MD2-1p"  "-102.629911267364" "0.102001741016456" 
[21,] "MD2-1r"  "-103.095650790068" "0.12058943508709"  
[22,] "MD2-1s"  "-103.128341026871" "0.122415391644306" 
[23,] "MD2-1t"  "-103.31248276504"  "0.109961702485619" 
[24,] "MD2-2a"  "-114.673714231728" "3.32906270301078"  
[25,] "MD2-2b"  "-98.9657583268991" "0.49803007384955"  
[26,] "MD2-2c"  "-99.2805099097257" "0.375246961264443" 
[27,] "MD2-2d"  "-105.178888016768" "0.302629496926321" 
[28,] "MD2-2e"  "-104.909974798099" "0.216711252624881" 
[29,] "MD2-2f"  "-103.939116408363" "0.131878323140778" 
[30,] "MD2-2g"  "-103.904428562146" "0.100407930071629" 
[31,] "MD2-2h"  "-103.415690707001" "0.101471379384078" 
[32,] "MD2-2i"  "-103.408439397137" "0.105483934710344" 
[33,] "MD2-2j"  "-103.43981155667"  "0.0993173184485819"
[34,] "MD2-2k"  "-103.509423151807" "0.101128051281518" 
[35,] "MD2-2l"  "-103.525256005361" "0.098244767307413" 
[36,] "MD2-2m"  "-103.509876971839" "0.0990727169165144"
[37,] "MD2-2n"  "-103.586688040729" "0.100300988849249" 
[38,] "MD2-2o"  "-103.59317476954"  "0.098941207807135" 
[39,] "MD2-2p"  "-103.62974794583"  "0.098316558993001" 
[40,] "MD2-2q"  "-103.636522057163" "0.102216678301452" 
[41,] "MD2-2r"  "-103.561302160236" "0.102991758968662" 
[42,] "MD2-2s"  "-103.613249167095" "0.0994623544720716"
[43,] "MD2-2t"  "-103.599924939233" "0.1003845186298"   
[44,] "MD2-2u"  "-103.455151497088" "0.0996687412214976"
[45,] "MD2-2v"  "-103.274036363198" "0.0990309237095393"
[46,] "MD2-2w"  "-103.329468559738" "0.10087842428036"  
[47,] "MD2-2x"  "-103.110472772969" "0.0990493288329629"
[48,] "MD2-2y"  "-102.929044785855" "0.10030780540474"  
[49,] "MD2-2z"  "-102.876396740334" "0.10259245324359"  
[50,] "MD2-2xz" "-102.536264969098" "0.0988411150333919"
[51,] "MD2-2yz" "-102.587126382132" "0.105820154149039" 
[52,] "MD2-1"   "-107.03197144995"  "0.142105399647443" 
[53,] "MD2-2"   "-108.026158714504" "0.13733447181796"  
[54,] "MD2-3"   "-105.396376363752" "0.16972406977756"  
[55,] "MD2-4"   "-105.219384757058" "0.14347666196847"  
[56,] "MD2-5"   "-100.905148249171" "0.297712743660618" 
[57,] "MD2-6"   "-104.525169579362" "0.123223997126842" 
[58,] "MD2-7"   "-107.490616723819" "0.178641514797158" 
[59,] "MD2-8"   "-107.127382630305" "0.128210834194392" 
[60,] "MD2-9"   "-105.004018955542" "0.12477825524078"  
[61,] "MD2-10"  "-104.246874883851" "0.110406123575707" 
      name      age[Ma]             s.e.[Ma]            
 [1,] "FC1_MD2" "28.2237620267159"  "0.0269147111084562"
 [2,] "FC2-MD2" "28.191956211882"   "0.0253209277110002"
 [3,] "FC3-MD2" "28.1919134833219"  "0.0255491836459355"
 [4,] "FC4-MD2" "28.1798410162245"  "0.0262140890942054"
 [5,] "MD2-1a"  "-106.313621171309" "0.304699032324512" 
 [6,] "MD2-1b"  "-104.821745840967" "0.156619312947779" 
 [7,] "MD2-1c"  "-103.495596610976" "0.106851395531071" 
 [8,] "MD2-1d"  "-103.398182097861" "0.103213812590012" 
 [9,] "MD2-1e"  "-103.450163627366" "0.0984339803366754"
[10,] "MD2-1f"  "-103.365811315276" "0.100717498149939" 
[11,] "MD2-1g"  "-103.371025452275" "0.101511983168889" 
[12,] "MD2-1h"  "-103.377124200936" "0.104417150471288" 
[13,] "MD2-1i"  "-103.407496436603" "0.101932064631989" 
[14,] "MD2-1j"  "-103.437873353811" "0.101593471625644" 
[15,] "MD2-1k"  "-103.58580448579"  "0.104019002401873" 
[16,] "MD2-1l"  "-103.517822454836" "0.104153681744221" 
[17,] "MD2-1m"  "-103.53032853284"  "0.109540965848045" 
[18,] "MD2-1n"  "-103.210744216681" "0.102224016966059" 
[19,] "MD2-1o"  "-102.845946020436" "0.100086102272905" 
[20,] "MD2-1p"  "-102.629911267364" "0.102001741016456" 
[21,] "MD2-1r"  "-103.095650790068" "0.12058943508709"  
[22,] "MD2-1s"  "-103.128341026871" "0.122415391644306" 
[23,] "MD2-1t"  "-103.31248276504"  "0.109961702485619" 
[24,] "MD2-2a"  "-114.673714231728" "3.32906270301078"  
[25,] "MD2-2b"  "-98.9657583268991" "0.49803007384955"  
[26,] "MD2-2c"  "-99.2805099097257" "0.375246961264443" 
[27,] "MD2-2d"  "-105.178888016768" "0.302629496926321" 
[28,] "MD2-2e"  "-104.909974798099" "0.216711252624881" 
[29,] "MD2-2f"  "-103.939116408363" "0.131878323140778" 
[30,] "MD2-2g"  "-103.904428562146" "0.100407930071629" 
[31,] "MD2-2h"  "-103.415690707001" "0.101471379384078" 
[32,] "MD2-2i"  "-103.408439397137" "0.105483934710344" 
[33,] "MD2-2j"  "-103.43981155667"  "0.0993173184485819"
[34,] "MD2-2k"  "-103.509423151807" "0.101128051281518" 
[35,] "MD2-2l"  "-103.525256005361" "0.098244767307413" 
[36,] "MD2-2m"  "-103.509876971839" "0.0990727169165144"
[37,] "MD2-2n"  "-103.586688040729" "0.100300988849249" 
[38,] "MD2-2o"  "-103.59317476954"  "0.098941207807135" 
[39,] "MD2-2p"  "-103.62974794583"  "0.098316558993001" 
[40,] "MD2-2q"  "-103.636522057163" "0.102216678301452" 
[41,] "MD2-2r"  "-103.561302160236" "0.102991758968662" 
[42,] "MD2-2s"  "-103.613249167095" "0.0994623544720716"
[43,] "MD2-2t"  "-103.599924939233" "0.1003845186298"   
[44,] "MD2-2u"  "-103.455151497088" "0.0996687412214976"
[45,] "MD2-2v"  "-103.274036363198" "0.0990309237095393"
[46,] "MD2-2w"  "-103.329468559738" "0.10087842428036"  
[47,] "MD2-2x"  "-103.110472772969" "0.0990493288329629"
[48,] "MD2-2y"  "-102.929044785855" "0.10030780540474"  
[49,] "MD2-2z"  "-102.876396740334" "0.10259245324359"  
[50,] "MD2-2xz" "-102.536264969098" "0.0988411150333919"
[51,] "MD2-2yz" "-102.587126382132" "0.105820154149039" 
[52,] "MD2-1"   "-107.03197144995"  "0.142105399647443" 
[53,] "MD2-2"   "-108.026158714504" "0.13733447181796"  
[54,] "MD2-3"   "-105.396376363752" "0.16972406977756"  
[55,] "MD2-4"   "-105.219384757058" "0.14347666196847"  
[56,] "MD2-5"   "-100.905148249171" "0.297712743660618" 
[57,] "MD2-6"   "-104.525169579362" "0.123223997126842" 
[58,] "MD2-7"   "-107.490616723819" "0.178641514797158" 
[59,] "MD2-8"   "-107.127382630305" "0.128210834194392" 
[60,] "MD2-9"   "-105.004018955542" "0.12477825524078"  
[61,] "MD2-10"  "-104.246874883851" "0.110406123575707" 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("interference", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("loaddata")
> ### * loaddata
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: loaddata
> ### Title: Load mass spectrometer data
> ### Aliases: loaddata
> 
> ### ** Examples
> 
> samplefile <- system.file("Samples.csv",package="ArArRedux")
> masses <- c("Ar37","Ar38","Ar39","Ar40","Ar36")
> m <- loaddata(samplefile,masses) # samples and J-standards
> plot(m,"MD2-1a","Ar40")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("loaddata", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("loadirradiations")
> ### * loadirradiations
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: loadirradiations
> ### Title: Load the irradiation schedule
> ### Aliases: loadirradiations
> 
> ### ** Examples
> 
> irrfile <- system.file("irradiations.csv",package="ArArRedux")
> irr <- loadirradiations(irrfile)
> str(irr)
List of 1
 $ UM52:List of 3
  ..$ P   : num [1:10] 1 1 1 1 1 1 1 1 1 1
  ..$ tin : num [1:10] 1.23e+09 1.23e+09 1.23e+09 1.23e+09 1.23e+09 ...
  ..$ tout: num [1:10] 1.23e+09 1.23e+09 1.23e+09 1.23e+09 1.23e+09 ...
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("loadirradiations", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("massfractionation")
> ### * massfractionation
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: massfractionation
> ### Title: Apply the mass fractionation correction
> ### Aliases: massfractionation
> 
> ### ** Examples
> 
> data(Melbourne)
> C <- calibration(Melbourne$X,"DCAL")
> A <- massfractionation(C,Melbourne$fract)
> plotcorr(A)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("massfractionation", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("param")
> ### * param
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: param
> ### Title: Set or get Ar-Ar_Redux parameters
> ### Aliases: param
> 
> ### ** Examples
> 
> data(Melbourne)
> param(Melbourne$X)$air
[1] 298.56
> Y <- param(Melbourne$X,air=295.5)
> param(Y)$air
[1] 295.5
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("param", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot")
> ### * plot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.timeresolved
> ### Title: Plot a time resolved mass spectrometry signal
> ### Aliases: plot.PHdata plot.timeresolved
> 
> ### ** Examples
> 
> samplefile <- system.file("Samples.csv",package="ArArRedux")
> masses <- c("Ar37","Ar38","Ar39","Ar40","Ar36")
> mMC <- loaddata(samplefile,masses)
> plot(mMC,"MD2-1a","Ar40")
> mPH <- loaddata(samplefile,masses,PH=TRUE)
> plot(mPH,"MD2-1a","Ar40")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plotcorr")
> ### * plotcorr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plotcorr
> ### Title: Plot a matrix with correlation coefficients
> ### Aliases: plotcorr
> 
> ### ** Examples
> 
> data(Melbourne)
> plotcorr(Melbourne$X)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plotcorr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("process")
> ### * process
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: process
> ### Title: Process logratio data and calculate 40Ar/39Ar ages
> ### Aliases: process
> 
> ### ** Examples
> 
> data(Melbourne)
> ages <- process(Melbourne$X,Melbourne$irr,Melbourne$fract)
> summary(ages)
      name      age[Ma]             s.e.[Ma]            
 [1,] "FC1_MD2" "28.2208085049636"  "0.0288296214146824"
 [2,] "FC2-MD2" "28.1906494896227"  "0.0273689208936056"
 [3,] "FC3-MD2" "28.1919593406912"  "0.0275982273500936"
 [4,] "FC4-MD2" "28.1778599509198"  "0.0281860266351195"
 [5,] "MD2-1a"  "-104.26418251766"  "0.313809715265692" 
 [6,] "MD2-1b"  "-103.469971878548" "0.163721091020803" 
 [7,] "MD2-1c"  "-102.418323156006" "0.113857630126563" 
 [8,] "MD2-1d"  "-102.384519213342" "0.109853535807805" 
 [9,] "MD2-1e"  "-102.467390316879" "0.105156630112693" 
[10,] "MD2-1f"  "-102.385826052041" "0.107267994327917" 
[11,] "MD2-1g"  "-102.395060889098" "0.107938318258344" 
[12,] "MD2-1h"  "-102.410315436313" "0.110604652063215" 
[13,] "MD2-1i"  "-102.439100698255" "0.108310346209685" 
[14,] "MD2-1j"  "-102.472167490121" "0.107991422381297" 
[15,] "MD2-1k"  "-102.615705274763" "0.11027811745493"  
[16,] "MD2-1l"  "-102.549665801297" "0.110384450603462" 
[17,] "MD2-1m"  "-102.555886986779" "0.115476154685643" 
[18,] "MD2-1n"  "-102.240602460914" "0.108590162994129" 
[19,] "MD2-1o"  "-101.876556789737" "0.106579965956786" 
[20,] "MD2-1p"  "-101.666667733425" "0.108292518887328" 
[21,] "MD2-1r"  "-102.129782994249" "0.125918245683647" 
[22,] "MD2-1s"  "-102.156772258503" "0.12780773951219"  
[23,] "MD2-1t"  "-102.337411892583" "0.115922694504452" 
[24,] "MD2-2a"  "-102.705503661173" "3.35027856395029"  
[25,] "MD2-2b"  "-95.7168159888448" "0.513870110735592" 
[26,] "MD2-2c"  "-97.1069062678596" "0.383633427354754" 
[27,] "MD2-2d"  "-103.489598361127" "0.308745019541378" 
[28,] "MD2-2e"  "-103.584685573346" "0.221693488549524" 
[29,] "MD2-2f"  "-102.771616151656" "0.138350092383114" 
[30,] "MD2-2g"  "-102.876561784268" "0.107417852983507" 
[31,] "MD2-2h"  "-102.427301902683" "0.108015339584573" 
[32,] "MD2-2i"  "-102.425241949948" "0.111768935160449" 
[33,] "MD2-2j"  "-102.463578150491" "0.105931805914803" 
[34,] "MD2-2k"  "-102.533947742459" "0.107607962725174" 
[35,] "MD2-2l"  "-102.553358872115" "0.104907407155987" 
[36,] "MD2-2m"  "-102.53979934055"  "0.105655857636073" 
[37,] "MD2-2n"  "-102.617685927834" "0.106801393556024" 
[38,] "MD2-2o"  "-102.624867825804" "0.105533335293585" 
[39,] "MD2-2p"  "-102.662035114748" "0.104946512714086" 
[40,] "MD2-2q"  "-102.668522069589" "0.108586987728013" 
[41,] "MD2-2r"  "-102.593090725711" "0.109315492946378" 
[42,] "MD2-2s"  "-102.64564185652"  "0.106015169600316" 
[43,] "MD2-2t"  "-102.632041558834" "0.106881601095316" 
[44,] "MD2-2u"  "-102.487210261651" "0.106195059969413" 
[45,] "MD2-2v"  "-102.307682505249" "0.105583774412147" 
[46,] "MD2-2w"  "-102.363916625357" "0.107298394426298" 
[47,] "MD2-2x"  "-102.147275921752" "0.105560267511008" 
[48,] "MD2-2y"  "-101.966400375935" "0.106723584165706" 
[49,] "MD2-2z"  "-101.913297940907" "0.108847677278038" 
[50,] "MD2-2xz" "-101.572920470283" "0.105335963497182" 
[51,] "MD2-2yz" "-101.59602657802"  "0.11211359722769"  
[52,] "MD2-1"   "-105.463990156718" "0.151700708732303" 
[53,] "MD2-2"   "-106.397144102033" "0.148050088760021" 
[54,] "MD2-3"   "-104.048956163644" "0.175846109325759" 
[55,] "MD2-4"   "-103.891242528955" "0.150459917887621" 
[56,] "MD2-5"   "-99.1771196164527" "0.303619757877846" 
[57,] "MD2-6"   "-103.256779306061" "0.130639838423959" 
[58,] "MD2-7"   "-105.895373274171" "0.186674797503993" 
[59,] "MD2-8"   "-105.536214667267" "0.139085753095173" 
[60,] "MD2-9"   "-103.728366431213" "0.132135404471392" 
[61,] "MD2-10"  "-103.083288418039" "0.117556317727426" 
      name      age[Ma]             s.e.[Ma]            
 [1,] "FC1_MD2" "28.2208085049636"  "0.0288296214146824"
 [2,] "FC2-MD2" "28.1906494896227"  "0.0273689208936056"
 [3,] "FC3-MD2" "28.1919593406912"  "0.0275982273500936"
 [4,] "FC4-MD2" "28.1778599509198"  "0.0281860266351195"
 [5,] "MD2-1a"  "-104.26418251766"  "0.313809715265692" 
 [6,] "MD2-1b"  "-103.469971878548" "0.163721091020803" 
 [7,] "MD2-1c"  "-102.418323156006" "0.113857630126563" 
 [8,] "MD2-1d"  "-102.384519213342" "0.109853535807805" 
 [9,] "MD2-1e"  "-102.467390316879" "0.105156630112693" 
[10,] "MD2-1f"  "-102.385826052041" "0.107267994327917" 
[11,] "MD2-1g"  "-102.395060889098" "0.107938318258344" 
[12,] "MD2-1h"  "-102.410315436313" "0.110604652063215" 
[13,] "MD2-1i"  "-102.439100698255" "0.108310346209685" 
[14,] "MD2-1j"  "-102.472167490121" "0.107991422381297" 
[15,] "MD2-1k"  "-102.615705274763" "0.11027811745493"  
[16,] "MD2-1l"  "-102.549665801297" "0.110384450603462" 
[17,] "MD2-1m"  "-102.555886986779" "0.115476154685643" 
[18,] "MD2-1n"  "-102.240602460914" "0.108590162994129" 
[19,] "MD2-1o"  "-101.876556789737" "0.106579965956786" 
[20,] "MD2-1p"  "-101.666667733425" "0.108292518887328" 
[21,] "MD2-1r"  "-102.129782994249" "0.125918245683647" 
[22,] "MD2-1s"  "-102.156772258503" "0.12780773951219"  
[23,] "MD2-1t"  "-102.337411892583" "0.115922694504452" 
[24,] "MD2-2a"  "-102.705503661173" "3.35027856395029"  
[25,] "MD2-2b"  "-95.7168159888448" "0.513870110735592" 
[26,] "MD2-2c"  "-97.1069062678596" "0.383633427354754" 
[27,] "MD2-2d"  "-103.489598361127" "0.308745019541378" 
[28,] "MD2-2e"  "-103.584685573346" "0.221693488549524" 
[29,] "MD2-2f"  "-102.771616151656" "0.138350092383114" 
[30,] "MD2-2g"  "-102.876561784268" "0.107417852983507" 
[31,] "MD2-2h"  "-102.427301902683" "0.108015339584573" 
[32,] "MD2-2i"  "-102.425241949948" "0.111768935160449" 
[33,] "MD2-2j"  "-102.463578150491" "0.105931805914803" 
[34,] "MD2-2k"  "-102.533947742459" "0.107607962725174" 
[35,] "MD2-2l"  "-102.553358872115" "0.104907407155987" 
[36,] "MD2-2m"  "-102.53979934055"  "0.105655857636073" 
[37,] "MD2-2n"  "-102.617685927834" "0.106801393556024" 
[38,] "MD2-2o"  "-102.624867825804" "0.105533335293585" 
[39,] "MD2-2p"  "-102.662035114748" "0.104946512714086" 
[40,] "MD2-2q"  "-102.668522069589" "0.108586987728013" 
[41,] "MD2-2r"  "-102.593090725711" "0.109315492946378" 
[42,] "MD2-2s"  "-102.64564185652"  "0.106015169600316" 
[43,] "MD2-2t"  "-102.632041558834" "0.106881601095316" 
[44,] "MD2-2u"  "-102.487210261651" "0.106195059969413" 
[45,] "MD2-2v"  "-102.307682505249" "0.105583774412147" 
[46,] "MD2-2w"  "-102.363916625357" "0.107298394426298" 
[47,] "MD2-2x"  "-102.147275921752" "0.105560267511008" 
[48,] "MD2-2y"  "-101.966400375935" "0.106723584165706" 
[49,] "MD2-2z"  "-101.913297940907" "0.108847677278038" 
[50,] "MD2-2xz" "-101.572920470283" "0.105335963497182" 
[51,] "MD2-2yz" "-101.59602657802"  "0.11211359722769"  
[52,] "MD2-1"   "-105.463990156718" "0.151700708732303" 
[53,] "MD2-2"   "-106.397144102033" "0.148050088760021" 
[54,] "MD2-3"   "-104.048956163644" "0.175846109325759" 
[55,] "MD2-4"   "-103.891242528955" "0.150459917887621" 
[56,] "MD2-5"   "-99.1771196164527" "0.303619757877846" 
[57,] "MD2-6"   "-103.256779306061" "0.130639838423959" 
[58,] "MD2-7"   "-105.895373274171" "0.186674797503993" 
[59,] "MD2-8"   "-105.536214667267" "0.139085753095173" 
[60,] "MD2-9"   "-103.728366431213" "0.132135404471392" 
[61,] "MD2-10"  "-103.083288418039" "0.117556317727426" 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("process", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read")
> ### * read
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read
> ### Title: Read mass spectrometer data
> ### Aliases: read
> 
> ### ** Examples
> 
> samplefile <-  system.file("Samples.csv",package="ArArRedux")
> kfile <- system.file("K-glass.csv",package="ArArRedux")
> cafile <- system.file("Ca-salt.csv",package="ArArRedux")
> dfile <- system.file("Calibration.csv",package="ArArRedux")
> masses <- c("Ar37","Ar38","Ar39","Ar40","Ar36")
> dlabels <- c("H1","AX","L1","L2")
> X <- read(samplefile,masses,"EXB#",c(3,15),kfile,cafile,dfile,dlabels)
> plotcorr(X)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("redux2isoplotr")
> ### * redux2isoplotr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: redux2isoplotr
> ### Title: Export 'ArArRedux' data to 'IsoplotR'
> ### Aliases: redux2isoplotr
> 
> ### ** Examples
> 
> data(Melbourne)
> print(redux2isoplotr(Melbourne$X,Melbourne$irr))
      [,1]                  [,2]                   [,3]                  
 [1,] "J"                   "errJ"                 ""                    
 [2,] "-0.0435396577240632" "5.39662761773425e-05" ""                    
 [3,] "Ar39Ar40"            "errAr39Ar40"          "Ar36Ar40"            
 [4,] "1.58412880736199"    "0.000152752011073314" "1.36892969844316e-05"
 [5,] "1.57568185079945"    "0.000169970236264012" "2.93521947528155e-05"
 [6,] "1.56880161771601"    "0.000123605632093841" "4.38042043716358e-05"
 [7,] "1.57917415806077"    "0.00013558257357943"  "2.11468167027286e-05"
 [8,] "0.251440605492013"   "5.11960554244541e-05" "0.00141366794179663" 
 [9,] "0.346495872114413"   "6.72451702618034e-05" "0.000701890720333722"
[10,] "0.407134321876931"   "7.1971645237145e-05"  "0.000259883714309038"
[11,] "0.424339985976708"   "7.82014073712444e-05" "0.000130969996991295"
[12,] "0.433237504856576"   "4.22686928352759e-05" "6.24391851369539e-05"
[13,] "0.434062031090577"   "5.16923523205988e-05" "5.76673227669452e-05"
[14,] "0.435255759526891"   "7.70027460414997e-05" "4.8466366813932e-05" 
[15,] "0.437991981130584"   "6.86954879771787e-05" "2.75553678787572e-05"
[16,] "0.437522879380303"   "4.42580370092839e-05" "3.04818482329665e-05"
[17,] "0.438328368150164"   "3.75198705150768e-05" "2.38361638322197e-05"
[18,] "0.437005399086294"   "7.61585258072147e-05" "3.12378254993157e-05"
[19,] "0.437579234540006"   "8.36335562998953e-05" "2.82065808189457e-05"
[20,] "0.435706223504436"   "9.14991179836573e-05" "4.21697879145911e-05"
[21,] "0.43699937552217"    "4.04725759326184e-05" "3.80561016087367e-05"
[22,] "0.43725125077704"    "3.23813579391908e-05" "4.25155495700292e-05"
[23,] "0.439103814328019"   "5.03815348956906e-05" "3.24140746790105e-05"
[24,] "0.43829547088585"    "9.59572198553286e-05" "3.0180170910866e-05" 
[25,] "0.436603959423027"   "7.68656181955397e-05" "4.22142376210428e-05"
[26,] "0.435523315240412"   "0.000100928192465379" "4.74751334108512e-05"
[27,] "0.0513978707451012"  "6.96251784883096e-05" "0.00293773718247626" 
[28,] "0.17047188087087"    "0.000104022557177482" "0.00208798723026568" 
[29,] "0.2394460952385"     "0.000101579822017744" "0.00157374046498223" 
[30,] "0.292899908318014"   "4.95560708560148e-05" "0.00110749763301849" 
[31,] "0.351549633517267"   "3.98281074680423e-05" "0.000661923774230007"
[32,] "0.384972869624102"   "4.62805404551917e-05" "0.000421387635588898"
[33,] "0.420350767590899"   "4.50393807981476e-05" "0.000152660940096845"
[34,] "0.431589169341538"   "7.26790469868532e-05" "7.56213382538186e-05"
[35,] "0.433108808086686"   "4.44245867029057e-05" "6.42157732075914e-05"
[36,] "0.435163149959807"   "3.24296728266643e-05" "4.80627498405017e-05"
[37,] "0.435369504278103"   "5.17669827842857e-05" "4.54368535076576e-05"
[38,] "0.436447442084509"   "3.76759039993129e-05" "3.68141183568009e-05"
[39,] "0.436989986107198"   "4.75839274086508e-05" "3.29831057249304e-05"
[40,] "0.437312978897938"   "4.61434757390821e-05" "2.91138952266481e-05"
[41,] "0.437514269599164"   "2.84740362970852e-05" "2.75430320316241e-05"
[42,] "0.437695686694124"   "3.70457397230147e-05" "2.54595133598435e-05"
[43,] "0.437601765613956"   "4.58736546252347e-05" "2.61357868397931e-05"
[44,] "0.437544355579291"   "4.7801904910963e-05"  "2.78809073626952e-05"
[45,] "0.437734865752853"   "4.17596728392305e-05" "2.53802585252273e-05"
[46,] "0.437645150326828"   "3.09165390665342e-05" "2.63820559098614e-05"
[47,] "0.437632497760513"   "4.05858927451249e-05" "2.90732927822673e-05"
[48,] "0.438119704800275"   "2.90224804155094e-05" "2.85726270245487e-05"
[49,] "0.438366109774415"   "4.33735232056626e-05" "2.56303499339709e-05"
[50,] "0.439084772327691"   "3.73880641620625e-05" "2.41002017039129e-05"
[51,] "0.439272183885019"   "3.82971567529398e-05" "2.57858570315353e-05"
[52,] "0.439138544602215"   "6.52284791399338e-05" "2.77242280141921e-05"
[53,] "0.439057427365401"   "4.13576992016509e-05" "3.46594911126237e-05"
[54,] "0.430827524966241"   "5.15395377558166e-05" "9.59757513028562e-05"
[55,] "0.348163913700414"   "5.46665869877664e-05" "0.000659380849091169"
[56,] "0.339253990359035"   "6.74474448137191e-05" "0.000714972900642895"
[57,] "0.384145142104291"   "4.75663618037895e-05" "0.000406440700553967"
[58,] "0.38764950666577"    "3.0204429802067e-05"  "0.000382555882649059"
[59,] "0.327407975645084"   "5.53915800634017e-05" "0.000900254520069754"
[60,] "0.399013552942927"   "2.39480828779494e-05" "0.000306723276344589"
[61,] "0.34411319334452"    "2.43893938968732e-05" "0.000684690985693992"
[62,] "0.344780499713101"   "2.39182019835078e-05" "0.000684411929871886"
[63,] "0.397479623301216"   "3.59313337303468e-05" "0.000310554237085494"
[64,] "0.420305252598451"   "3.66558426675971e-05" "0.000149224777916373"
      [,4]                   [,5]               [,6]                
 [1,] ""                     ""                 ""                  
 [2,] ""                     ""                 ""                  
 [3,] "errAr36Ar40"          "Ar39Ar36"         "errAr39Ar36"       
 [4,] "5.1730285174701e-07"  "115720.245470864" "4365.18465818521"  
 [5,] "1.68844930532783e-07" "53681.9091065859" "307.746911937149"  
 [6,] "3.56926622345118e-07" "35813.9507433182" "290.632124733618"  
 [7,] "4.91837193547601e-07" "74676.6844513767" "1734.23582495354"  
 [8,] "2.49368395556003e-06" "177.863979268326" "0.282847828198997" 
 [9,] "1.43256070337643e-06" "493.660711099966" "0.973121556050576" 
[10,] "6.82402633190888e-07" "1566.60190485346" "4.24705916906793"  
[11,] "5.42383494245916e-07" "3239.97858841603" "13.7112051967923"  
[12,] "1.67902916526554e-07" "6938.55155070193" "19.0148652984706"  
[13,] "5.12754444332013e-07" "7527.00160617445" "67.3132072289921"  
[14,] "1.50747720052063e-07" "8980.57329524798" "28.7648154545738"  
[15,] "3.48681117102857e-07" "15894.978541304"  "200.644381992875"  
[16,] "2.94688818587274e-07" "14353.5548119132" "138.151974386476"  
[17,] "4.75403182921333e-07" "18389.2161186469" "366.907987515975"  
[18,] "3.80078901468149e-07" "13989.6229043173" "170.937150575653"  
[19,] "5.83526361783995e-07" "15513.3738948641" "322.004755142758"  
[20,] "4.0257900480872e-07"  "10332.1891110028" "98.5042800962806"  
[21,] "3.32145748376841e-07" "11483.0305009971" "99.672248697368"   
[22,] "4.36623708848695e-07" "10284.5019104557" "105.821820528164"  
[23,] "3.89273126507409e-07" "13546.7021248136" "162.36986664363"   
[24,] "9.75143572740248e-07" "14522.6305106194" "468.908123935105"  
[25,] "1.07281338686523e-06" "10342.5759655408" "263.200297558497"  
[26,] "9.67455715376861e-07" "9173.71440478916" "187.902243801488"  
[27,] "6.41074584459951e-06" "17.4957348300903" "0.036791853733504" 
[28,] "2.57543594292004e-06" "81.6441204236569" "0.0706218076172329"
[29,] "2.87934854029103e-06" "152.15094265318"  "0.245950508962094" 
[30,] "3.33012114316327e-06" "264.470008409602" "0.797632708981677" 
[31,] "2.4747194624126e-06"  "531.102896139684" "1.94457300425186"  
[32,] "1.13969894855692e-06" "913.583686635927" "2.42095539313127"  
[33,] "4.97422761747103e-07" "2753.49259164942" "9.15573933618857"  
[34,] "3.94253873239023e-07" "5707.24056605471" "30.23450562375"    
[35,] "5.80871452109931e-07" "6744.58604876669" "60.873149515327"   
[36,] "1.72342852917153e-07" "9054.06268688151" "32.158790517986"   
[37,] "1.74169388585004e-07" "9581.8585722431"  "36.3725171477535"  
[38,] "2.21147327793762e-07" "11855.4364891882" "71.8373931672863"  
[39,] "2.32132535853829e-07" "13248.9035372099" "93.9053419548273"  
[40,] "2.90288639197513e-07" "15020.7650159318" "149.937984854505"  
[41,] "1.65225124530018e-07" "15884.7533233387" "95.0477548301902"  
[42,] "1.53306108723867e-07" "17191.8324010265" "104.425557026098"  
[43,] "2.52328514494861e-07" "16743.3935812364" "160.785538102403"  
[44,] "4.0045268670431e-07"  "15693.3327128631" "225.057577513094"  
[45,] "2.90204028557954e-07" "17247.0609516351" "197.770285036693"  
[46,] "3.00270100445314e-07" "16588.7431905275" "188.521645553186"  
[47,] "1.7897679274493e-07"  "15052.732452357"  "92.4811010013392"  
[48,] "2.21088971108614e-07" "15333.5464892275" "118.375331796255"  
[49,] "2.20958353992904e-07" "17103.3993255549" "146.810032452515"  
[50,] "1.28843719430707e-07" "18219.1326745785" "96.7842050533981"  
[51,] "2.54376955885335e-07" "17035.3920502934" "167.455955713793"  
[52,] "2.96840989080776e-07" "15839.5229031235" "169.554388579504"  
[53,] "2.53370702676493e-07" "12667.7401563316" "92.6644413683379"  
[54,] "5.68705120101911e-07" "4488.92057751904" "26.6223768514385"  
[55,] "1.39489259718535e-06" "528.016417492701" "1.13755756680015"  
[56,] "1.42653876600323e-06" "474.499089481548" "0.991627058991429" 
[57,] "2.05634637803925e-06" "945.144375503516" "4.76406987735955"  
[58,] "1.56585897803139e-06" "1013.31471883647" "4.14191475409007"  
[59,] "3.5182202403761e-06"  "363.683789801706" "1.39411961793974"  
[60,] "1.17388149937769e-06" "1300.89101061458" "4.99085517954745"  
[61,] "1.91639484026635e-06" "502.581749335771" "1.38950917637813"  
[62,] "1.09822138484204e-06" "503.761674314531" "0.822221685809173" 
[63,] "1.09431412709968e-06" "1279.90404198475" "4.47665986320646"  
[64,] "9.06768541133224e-07" "2816.5915772647"  "17.2050019732128"  
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("redux2isoplotr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("subset")
> ### * subset
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: subset.timeresolved
> ### Title: Select a subset of some data
> ### Aliases: subset.logratios subset.redux subset.results
> ###   subset.timeresolved
> 
> ### ** Examples
> 
> data(Melbourne)
> ages <- process(Melbourne$X,Melbourne$irr,Melbourne$fract)
> MD <- subset(ages,labels=c("MD2-1","MD2-2","MD2-3","MD2-4","MD2-5"))
> plotcorr(MD)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("subset", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summary")
> ### * summary
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summary.results
> ### Title: Summary table
> ### Aliases: summary.results
> 
> ### ** Examples
> 
> data(Melbourne)
> ages <- process(Melbourne$X,Melbourne$irr,Melbourne$fract)
> summary(ages)[1:5,]
      name      age[Ma]             s.e.[Ma]            
 [1,] "FC1_MD2" "28.2208085049636"  "0.0288296214146824"
 [2,] "FC2-MD2" "28.1906494896227"  "0.0273689208936056"
 [3,] "FC3-MD2" "28.1919593406912"  "0.0275982273500936"
 [4,] "FC4-MD2" "28.1778599509198"  "0.0281860266351195"
 [5,] "MD2-1a"  "-104.26418251766"  "0.313809715265692" 
 [6,] "MD2-1b"  "-103.469971878548" "0.163721091020803" 
 [7,] "MD2-1c"  "-102.418323156006" "0.113857630126563" 
 [8,] "MD2-1d"  "-102.384519213342" "0.109853535807805" 
 [9,] "MD2-1e"  "-102.467390316879" "0.105156630112693" 
[10,] "MD2-1f"  "-102.385826052041" "0.107267994327917" 
[11,] "MD2-1g"  "-102.395060889098" "0.107938318258344" 
[12,] "MD2-1h"  "-102.410315436313" "0.110604652063215" 
[13,] "MD2-1i"  "-102.439100698255" "0.108310346209685" 
[14,] "MD2-1j"  "-102.472167490121" "0.107991422381297" 
[15,] "MD2-1k"  "-102.615705274763" "0.11027811745493"  
[16,] "MD2-1l"  "-102.549665801297" "0.110384450603462" 
[17,] "MD2-1m"  "-102.555886986779" "0.115476154685643" 
[18,] "MD2-1n"  "-102.240602460914" "0.108590162994129" 
[19,] "MD2-1o"  "-101.876556789737" "0.106579965956786" 
[20,] "MD2-1p"  "-101.666667733425" "0.108292518887328" 
[21,] "MD2-1r"  "-102.129782994249" "0.125918245683647" 
[22,] "MD2-1s"  "-102.156772258503" "0.12780773951219"  
[23,] "MD2-1t"  "-102.337411892583" "0.115922694504452" 
[24,] "MD2-2a"  "-102.705503661173" "3.35027856395029"  
[25,] "MD2-2b"  "-95.7168159888448" "0.513870110735592" 
[26,] "MD2-2c"  "-97.1069062678596" "0.383633427354754" 
[27,] "MD2-2d"  "-103.489598361127" "0.308745019541378" 
[28,] "MD2-2e"  "-103.584685573346" "0.221693488549524" 
[29,] "MD2-2f"  "-102.771616151656" "0.138350092383114" 
[30,] "MD2-2g"  "-102.876561784268" "0.107417852983507" 
[31,] "MD2-2h"  "-102.427301902683" "0.108015339584573" 
[32,] "MD2-2i"  "-102.425241949948" "0.111768935160449" 
[33,] "MD2-2j"  "-102.463578150491" "0.105931805914803" 
[34,] "MD2-2k"  "-102.533947742459" "0.107607962725174" 
[35,] "MD2-2l"  "-102.553358872115" "0.104907407155987" 
[36,] "MD2-2m"  "-102.53979934055"  "0.105655857636073" 
[37,] "MD2-2n"  "-102.617685927834" "0.106801393556024" 
[38,] "MD2-2o"  "-102.624867825804" "0.105533335293585" 
[39,] "MD2-2p"  "-102.662035114748" "0.104946512714086" 
[40,] "MD2-2q"  "-102.668522069589" "0.108586987728013" 
[41,] "MD2-2r"  "-102.593090725711" "0.109315492946378" 
[42,] "MD2-2s"  "-102.64564185652"  "0.106015169600316" 
[43,] "MD2-2t"  "-102.632041558834" "0.106881601095316" 
[44,] "MD2-2u"  "-102.487210261651" "0.106195059969413" 
[45,] "MD2-2v"  "-102.307682505249" "0.105583774412147" 
[46,] "MD2-2w"  "-102.363916625357" "0.107298394426298" 
[47,] "MD2-2x"  "-102.147275921752" "0.105560267511008" 
[48,] "MD2-2y"  "-101.966400375935" "0.106723584165706" 
[49,] "MD2-2z"  "-101.913297940907" "0.108847677278038" 
[50,] "MD2-2xz" "-101.572920470283" "0.105335963497182" 
[51,] "MD2-2yz" "-101.59602657802"  "0.11211359722769"  
[52,] "MD2-1"   "-105.463990156718" "0.151700708732303" 
[53,] "MD2-2"   "-106.397144102033" "0.148050088760021" 
[54,] "MD2-3"   "-104.048956163644" "0.175846109325759" 
[55,] "MD2-4"   "-103.891242528955" "0.150459917887621" 
[56,] "MD2-5"   "-99.1771196164527" "0.303619757877846" 
[57,] "MD2-6"   "-103.256779306061" "0.130639838423959" 
[58,] "MD2-7"   "-105.895373274171" "0.186674797503993" 
[59,] "MD2-8"   "-105.536214667267" "0.139085753095173" 
[60,] "MD2-9"   "-103.728366431213" "0.132135404471392" 
[61,] "MD2-10"  "-103.083288418039" "0.117556317727426" 
     name      age[Ma]            s.e.[Ma]            
[1,] "FC1_MD2" "28.2208085049636" "0.0288296214146824"
[2,] "FC2-MD2" "28.1906494896227" "0.0273689208936056"
[3,] "FC3-MD2" "28.1919593406912" "0.0275982273500936"
[4,] "FC4-MD2" "28.1778599509198" "0.0281860266351195"
[5,] "MD2-1a"  "-104.26418251766" "0.313809715265692" 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summary", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("weightedmean")
> ### * weightedmean
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: weightedmean
> ### Title: Calculate the weighted mean age
> ### Aliases: weightedmean
> 
> ### ** Examples
> 
> data(Melbourne)
> ages <- process(Melbourne$X,Melbourne$irr,Melbourne$fract)
> weightedmean(ages,"MD2-1")
$avgt
          [,1]
[1,] -102.2029

$err
         [,1]
[1,] 0.104265

$MSWD
         [,1]
[1,] 116.0647

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("weightedmean", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  19.18 0.224 19.502 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
